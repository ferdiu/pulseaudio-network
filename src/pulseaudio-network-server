#!/usr/bin/env python3
"""
PulseAudio Network Server
Manages PulseAudio TCP server module with configuration file support
"""

import json
import logging
import os
import signal
import subprocess
import sys
import time
from pathlib import Path
from typing import Dict

class PulseAudioServer:
    def __init__(self, config_dir: str = "/etc/pulseaudio-network"):
        self.config_dir = Path(config_dir)
        self.config_file = self.config_dir / "server.json"
        self.module_id = None
        self.running = True

        # Set up logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler('/var/log/pulseaudio-server.log')
            ]
        )
        self.logger = logging.getLogger(__name__)

        # Handle signals for graceful shutdown
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)

    def _signal_handler(self, signum: int, frame) -> None:
        """Handle termination signals"""
        self.logger.info(f"Received signal {signum}, initiating graceful shutdown")
        self.running = False

    def load_config(self) -> Dict:
        """Load configuration from JSON file"""
        default_config = {
            "port": 4656,
            "listen_address": "0.0.0.0",
            "auth_anonymous": True,
            "auth_ip_acl": [],
            "sample_spec": None,
            "channel_map": None
        }

        try:
            if self.config_file.exists():
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    # Merge with defaults
                    default_config.update(config)
                    self.logger.info(f"Loaded configuration from {self.config_file}")
            else:
                self.logger.warning(f"Config file {self.config_file} not found, using defaults")
                # Create default config file
                self.config_dir.mkdir(parents=True, exist_ok=True)
                with open(self.config_file, 'w') as f:
                    json.dump(default_config, f, indent=2)
                self.logger.info(f"Created default config at {self.config_file}")

        except (json.JSONDecodeError, IOError) as e:
            self.logger.error(f"Error loading config: {e}, using defaults")

        return default_config

    def check_pulseaudio(self) -> bool:
        """Check if PulseAudio is running and accessible"""
        try:
            result = subprocess.run(
                ['pactl', 'info'],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                self.logger.debug("PulseAudio is accessible")
                return True
            else:
                self.logger.error("PulseAudio is not accessible")
                return False
        except subprocess.SubprocessError as e:
            self.logger.error(f"Error checking PulseAudio: {e}")
            return False

    def load_module(self, config: Dict) -> bool:
        """Load the PulseAudio TCP server module"""
        # Build module arguments
        args = [
            f"port={config['port']}",
            f"listen={config['listen_address']}"
        ]

        if config.get('auth_anonymous'):
            args.append("auth-anonymous=true")

        if config.get('auth_ip_acl'):
            acl = ','.join(config['auth_ip_acl'])
            args.append(f"auth-ip-acl={acl}")

        if config.get('sample_spec'):
            args.append(f"sample_spec={config['sample_spec']}")

        if config.get('channel_map'):
            args.append(f"channel_map={config['channel_map']}")

        cmd = ['pactl', 'load-module', 'module-native-protocol-tcp'] + args

        try:
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.module_id = result.stdout.strip()
                self.logger.info(f"Loaded module with ID: {self.module_id}")
                self.logger.info(f"TCP server listening on {config['listen_address']}:{config['port']}")
                return True
            else:
                self.logger.error(f"Failed to load module: {result.stderr}")
                return False

        except subprocess.SubprocessError as e:
            self.logger.error(f"Error loading module: {e}")
            return False

    def unload_module(self) -> bool:
        """Unload the PulseAudio TCP server module"""
        if not self.module_id:
            return True

        try:
            result = subprocess.run(
                ['pactl', 'unload-module', self.module_id],
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                self.logger.info(f"Unloaded module {self.module_id}")
                self.module_id = None
                return True
            else:
                self.logger.error(f"Failed to unload module: {result.stderr}")
                return False

        except subprocess.SubprocessError as e:
            self.logger.error(f"Error unloading module: {e}")
            return False

    def run(self) -> int:
        """Main run loop"""
        self.logger.info("Starting PulseAudio Network Server")

        # Wait for PulseAudio to be available
        max_retries = 30
        for retry in range(max_retries):
            if self.check_pulseaudio():
                break
            if not self.running:
                return 1
            self.logger.info(f"Waiting for PulseAudio... ({retry + 1}/{max_retries})")
            time.sleep(1)
        else:
            self.logger.error("PulseAudio not available after 30 seconds")
            return 1

        # Load configuration and start module
        config = self.load_config()

        if not self.load_module(config):
            self.logger.error("Failed to load PulseAudio module")
            return 1

        # Main loop - keep the service running
        self.logger.info("Server started successfully, entering main loop")
        try:
            while self.running:
                time.sleep(1)

                # Periodically check if PulseAudio is still running
                if not self.check_pulseaudio():
                    self.logger.error("PulseAudio is no longer accessible")
                    break

        except KeyboardInterrupt:
            self.logger.info("Received keyboard interrupt")
        finally:
            self.logger.info("Shutting down server")
            self.unload_module()

        return 0

def main():
    # Check if running as user service
    config_dir = os.path.expanduser("~/.config/pulseaudio-network")
    if os.getenv("XDG_CONFIG_HOME"):
        config_dir = os.path.join(os.getenv("XDG_CONFIG_HOME"), "pulseaudio-network")

    server = PulseAudioServer(config_dir)
    return server.run()

if __name__ == "__main__":
    sys.exit(main())